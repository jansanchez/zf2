// Generated by CoffeeScript 1.6.3
(function() {
  (function($, _) {
    var Scrollaize, browser, caldivExc, caldivMin, getBrowser, htm, loading, selScroll, uaMatch, win;
    getBrowser = function() {
      var a, b;
      a = uaMatch(navigator.userAgent);
      b = {};
      if (a.browser) {
        b[a.browser] = true;
        b.version = a.version;
      }
      if (b.chrome) {
        b.webkit = true;
      } else {
        if (b.webkit) {
          b.safari = true;
        }
      }
      return b;
    };
    uaMatch = function(b) {
      var a;
      b = b.toLowerCase();
      a = /(chrome)[ \/]([\w.]+)/.exec(b) || /(webkit)[ \/]([\w.]+)/.exec(b) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(b) || /(msie) ([\w.]+)/.exec(b) || b.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(b) || [];
      return {
        browser: a[1] || "",
        version: a[2] || "0"
      };
    };
    loading = function(inst, cond) {
      if (cond) {
        return inst.addClass("loading");
      } else {
        return inst.removeClass("loading");
      }
    };
    caldivExc = function(dividendo, divisor) {
      var residuo;
      residuo = dividendo % divisor;
      if (residuo !== 0) {
        return ((dividendo - residuo) / divisor) + 1;
      } else {
        return dividendo / divisor;
      }
    };
    caldivMin = function(dividendo, divisor) {
      var residuo;
      residuo = dividendo % divisor;
      if (residuo !== 0) {
        return (dividendo - residuo) / divisor;
      } else {
        return dividendo / divisor;
      }
    };
    win = $(window);
    htm = $("html")[0];
    browser = getBrowser();
    selScroll = browser.webkit ? $("body,document") : $("body,html");
    Scrollaize = (function() {
      function Scrollaize(that, options) {
        var opt;
        opt = {
          el: "",
          tag: "div",
          identifTag: "",
          btn: "",
          limit: 30,
          frecuency: 10,
          delayShow: 400,
          stop: false,
          table: false,
          callback: {
            preLoad: null,
            success: null,
            error: null
          }
        };
        this.settings = $.extend(opt, options);
        this.navHeight = htm.clientHeight;
        this.btn = $(this.settings.btn);
        this.arquitect = {
          regs: null,
          number: 0
        };
        this.flagAjax = true;
        this.scroll = {
          state: true,
          showElements: 0,
          groupScroll: 1,
          limitScroll: 0
        };
        this.el = $(this.settings.el);
        this._init();
      }

      Scrollaize.prototype._init = function() {
        this.settings.callback.preLoad && this.settings.callback.preLoad.call(this);
        this._construct();
        this._resizeScroll();
        this._scrollize();
      };

      Scrollaize.prototype._construct = function() {
        var arquitect, scroll, settings, _this;
        _this = this;
        settings = _this.settings;
        arquitect = _this.arquitect;
        scroll = _this.scroll;
        arquitect.regs = $(settings.tag + settings.identifTag, settings.el);
        arquitect.number = arquitect.regs.length;
        if (arquitect.number < settings.limit) {
          _this.flagAjax = false;
        }
        if (arquitect.number > settings.frecuency) {
          if (settings.table) {
            arquitect.regs.not(":lt(" + settings.frecuency + ")").find("td").hide();
          } else {
            arquitect.regs.not(":lt(" + settings.frecuency + ")").hide();
          }
          scroll.showElements = settings.frecuency;
        } else {
          scroll.state = false;
          scroll.showElements = arquitect.number;
        }
        if (arquitect.number === settings.limit && settings.limit === settings.frecuency) {
          scroll.state = false;
        } else {
          _this.btn.hide();
        }
      };

      Scrollaize.prototype._scrollize = function() {
        var lmtScroll, scroll, settings, top, _this;
        _this = this;
        settings = _this.settings;
        scroll = _this.scroll;
        top = 0;
        lmtScroll = 0;
        _this._calcLimit();
        scroll.state = !settings.stop ? scroll.state : false;
        win.on("scroll", function() {
          top = selScroll.scrollTop();
          console.log(scroll.state);
          if (top >= scroll.limitScroll && scroll.state) {
            scroll.state = false;
            setTimeout((function() {
              return _this._showElements();
            }), settings.delayShow);
          }
        });
      };

      Scrollaize.prototype._calcLimit = function() {
        var el, scroll, _this;
        _this = this;
        scroll = _this.scroll;
        el = _this.el;
        scroll.limitScroll = (el.offset().top + el.height()) - _this.navHeight;
      };

      Scrollaize.prototype._resizeScroll = function() {
        var _this;
        _this = this;
        win.on("resize", function() {
          _this.navHeight = htm.clientHeight;
          _this._calcLimit();
        });
      };

      Scrollaize.prototype._showElements = function() {
        var arquitect, currentel, frecuency, limit, nel, scroll, settings, totalel, _this;
        _this = this;
        scroll = _this.scroll;
        arquitect = _this.arquitect;
        settings = _this.settings;
        nel = scroll.showElements;
        totalel = arquitect.number;
        frecuency = settings.frecuency;
        limit = settings.limit * scroll.groupScroll;
        currentel = nel + frecuency;
        if (currentel <= totalel) {
          scroll.state = true;
          if (currentel === limit) {
            console.log("Debe mostrarse el boton");
          }
        } else {
          if (settings.table) {
            arquitect.regs.slice(nel, totalel).find("td").hide();
          } else {
            arquitect.regs.slice(nel, totalel).hide();
          }
          scroll.showElements = totalel;
          _this.btn.hide();
        }
      };

      return Scrollaize;

    })();
    $.fn.Scrollaize = function(methods) {
      if (typeof methods === "undefined" || methods.constructor === Object) {
        return new Scrollaize(this, methods);
      } else if (typeof methods !== "undefined" && methods.constructor === String) {
        Scrollaize[methods].apply(this, Array.prototype.slice.call(arguments_, 1));
      } else {
        $.error("El parametro proporcionado " + method + " esta mal declarado o no es un objeto");
      }
    };
  })(jQuery, _);

}).call(this);
