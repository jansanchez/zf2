// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'views/base/view', 'text!templates/layout-mail.hbs'], function(Chaplin, View, template) {
  'use strict';
  var LayoutView, _ref;
  return LayoutView = (function(_super) {
    __extends(LayoutView, _super);

    function LayoutView() {
      _ref = LayoutView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LayoutView.prototype.el = '#wrapper';

    LayoutView.prototype.template = template;

    LayoutView.prototype.dom = {};

    LayoutView.prototype.regions = {
      'paginate': '.ml-paginator',
      'page': '#divListMail',
      'listEmail': '#listEmail',
      'headMail': '.mail-head',
      'thread': '.mail-thread',
      'reply': '.mail-compose',
      'paginate-message': ".mail-paginator"
    };

    LayoutView.prototype.events = {
      "click #btnSearch": "searchKeyword",
      "keyup #txtSearch": "searchKeyword",
      "click #spaClose": "cleartxtSearch",
      "click #ancSelect": "selectOptions",
      "click #ancFilter": "selectFilter",
      "click #chkSelect": "selectFromList",
      "click .chkAll": "selectFromList",
      "click .chkNone": "selectFromList"
    };

    LayoutView.prototype.searchKeyword = function(e) {
      var search, txtSearch;
      this.dom.txtSearch = $('#txtSearch');
      this.dom.spaClose = $('#spaClose');
      txtSearch = $.trim(this.dom.txtSearch.val());
      if (e.which === 13 || e.which === 1) {
        if (txtSearch !== '') {
          /*
          creo mi "pathname" en base al action(search) y le paso el valor para el parametro "keyword" 
          mediante variable "txtSearch"
          */

          search = encodeURIComponent(txtSearch);
          return this.publishEvent('!router:route', Chaplin.helpers.reverse("search", [1, search]));
        } else {
          return this.publishEvent('!router:route', Chaplin.helpers.reverse("index#show", [1]));
        }
      } else {
        if (txtSearch === '') {
          return this.cleartxtSearch();
        } else {
          if (this.dom.spaClose.css('display') === 'none') {
            return this.dom.spaClose.fadeIn();
          }
        }
      }
    };

    LayoutView.prototype.selectOptions = function(e) {
      this.dom.ancSelect = $('#ancSelect');
      this.dom.ancFilter = $('#ancFilter');
      if (this.dom.ancFilter.parent().hasClass('act')) {
        this.dom.ancFilter.parent().removeClass('act');
      }
      return this.dom.ancSelect.parent().toggleClass('act');
    };

    LayoutView.prototype.selectFilter = function(e) {
      this.dom.ancSelect = $('#ancSelect');
      this.dom.ancFilter = $('#ancFilter');
      if (this.dom.ancSelect.parent().hasClass('act')) {
        this.dom.ancSelect.parent().removeClass('act');
      }
      return this.dom.ancFilter.parent().toggleClass('act');
    };

    LayoutView.prototype.cleartxtSearch = function() {
      this.dom.txtSearch.val('').focus();
      return this.dom.spaClose.fadeOut();
    };

    LayoutView.prototype.selectFromList = function(e) {
      var value;
      this.dom.chkSelect = $('#chkSelect');
      if ($(e.currentTarget).hasClass('chkAll')) {
        value = true;
        this.dom.chkSelect.prop('checked', value);
        if ($(e.currentTarget).parent().parent().parent().hasClass('act')) {
          $(e.currentTarget).parent().parent().parent().removeClass('act');
        }
      } else {
        if ($(e.currentTarget).hasClass('chkNone')) {
          value = false;
          this.dom.chkSelect.prop('checked', value);
          if ($(e.currentTarget).parent().parent().parent().hasClass('act')) {
            $(e.currentTarget).parent().parent().parent().removeClass('act');
          }
        } else {
          e.stopPropagation();
          value = $(e.currentTarget).prop('checked') ? true : false;
        }
      }
      return this.multiSelection(value);
    };

    LayoutView.prototype.multiSelection = function(value) {
      this.dom.divListMail = $('#divListMail');
      return this.dom.divListMail.children().each(function(i, el) {
        return $(el).children('input').prop('checked', value);
      });
    };

    return LayoutView;

  })(View);
});
